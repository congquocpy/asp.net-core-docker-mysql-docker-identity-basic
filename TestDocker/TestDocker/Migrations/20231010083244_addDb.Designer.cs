// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestDocker.Entities;

#nullable disable

namespace TestDocker.Migrations
{
    [DbContext(typeof(DemoContext))]
    [Migration("20231010083244_addDb")]
    partial class addDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TestDocker.Entities.CurrentDeptEmp", b =>
                {
                    b.Property<string>("DeptNo")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("char(4)")
                        .HasColumnName("dept_no")
                        .IsFixedLength();

                    b.Property<int>("EmpNo")
                        .HasColumnType("int")
                        .HasColumnName("emp_no");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.ToTable((string)null);

                    b.ToView("current_dept_emp", (string)null);
                });

            modelBuilder.Entity("TestDocker.Entities.Department", b =>
                {
                    b.Property<string>("DeptNo")
                        .HasMaxLength(4)
                        .HasColumnType("char(4)")
                        .HasColumnName("dept_no")
                        .IsFixedLength();

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("dept_name");

                    b.HasKey("DeptNo")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DeptName" }, "dept_name")
                        .IsUnique();

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("TestDocker.Entities.DeptEmp", b =>
                {
                    b.Property<int>("EmpNo")
                        .HasColumnType("int")
                        .HasColumnName("emp_no");

                    b.Property<string>("DeptNo")
                        .HasMaxLength(4)
                        .HasColumnType("char(4)")
                        .HasColumnName("dept_no")
                        .IsFixedLength();

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("EmpNo", "DeptNo")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DeptNo" }, "dept_no");

                    b.ToTable("dept_emp", (string)null);
                });

            modelBuilder.Entity("TestDocker.Entities.DeptEmpLatestDate", b =>
                {
                    b.Property<int>("EmpNo")
                        .HasColumnType("int")
                        .HasColumnName("emp_no");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.ToTable((string)null);

                    b.ToView("dept_emp_latest_date", (string)null);
                });

            modelBuilder.Entity("TestDocker.Entities.DeptManager", b =>
                {
                    b.Property<int>("EmpNo")
                        .HasColumnType("int")
                        .HasColumnName("emp_no");

                    b.Property<string>("DeptNo")
                        .HasMaxLength(4)
                        .HasColumnType("char(4)")
                        .HasColumnName("dept_no")
                        .IsFixedLength();

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("EmpNo", "DeptNo")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DeptNo" }, "dept_no")
                        .HasDatabaseName("dept_no1");

                    b.ToTable("dept_manager", (string)null);
                });

            modelBuilder.Entity("TestDocker.Entities.Employee", b =>
                {
                    b.Property<int>("EmpNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("emp_no");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("enum('M','F')")
                        .HasColumnName("gender");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hire_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("last_name");

                    b.HasKey("EmpNo")
                        .HasName("PRIMARY");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("TestDocker.Entities.Salary", b =>
                {
                    b.Property<int>("EmpNo")
                        .HasColumnType("int")
                        .HasColumnName("emp_no");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<int>("Salary1")
                        .HasColumnType("int")
                        .HasColumnName("salary");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("EmpNo", "FromDate")
                        .HasName("PRIMARY");

                    b.ToTable("salaries", (string)null);
                });

            modelBuilder.Entity("TestDocker.Entities.Title", b =>
                {
                    b.Property<int>("EmpNo")
                        .HasColumnType("int")
                        .HasColumnName("emp_no");

                    b.Property<string>("Title1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("EmpNo", "Title1", "FromDate")
                        .HasName("PRIMARY");

                    b.ToTable("titles", (string)null);
                });

            modelBuilder.Entity("TestDocker.Entities.UserApp", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("UserApp");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestDocker.Entities.DeptEmp", b =>
                {
                    b.HasOne("TestDocker.Entities.Department", "DeptNoNavigation")
                        .WithMany("DeptEmps")
                        .HasForeignKey("DeptNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dept_emp_ibfk_2");

                    b.HasOne("TestDocker.Entities.Employee", "EmpNoNavigation")
                        .WithMany("DeptEmps")
                        .HasForeignKey("EmpNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dept_emp_ibfk_1");

                    b.Navigation("DeptNoNavigation");

                    b.Navigation("EmpNoNavigation");
                });

            modelBuilder.Entity("TestDocker.Entities.DeptManager", b =>
                {
                    b.HasOne("TestDocker.Entities.Department", "DeptNoNavigation")
                        .WithMany("DeptManagers")
                        .HasForeignKey("DeptNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dept_manager_ibfk_2");

                    b.HasOne("TestDocker.Entities.Employee", "EmpNoNavigation")
                        .WithMany("DeptManagers")
                        .HasForeignKey("EmpNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dept_manager_ibfk_1");

                    b.Navigation("DeptNoNavigation");

                    b.Navigation("EmpNoNavigation");
                });

            modelBuilder.Entity("TestDocker.Entities.Salary", b =>
                {
                    b.HasOne("TestDocker.Entities.Employee", "EmpNoNavigation")
                        .WithMany("Salaries")
                        .HasForeignKey("EmpNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("salaries_ibfk_1");

                    b.Navigation("EmpNoNavigation");
                });

            modelBuilder.Entity("TestDocker.Entities.Title", b =>
                {
                    b.HasOne("TestDocker.Entities.Employee", "EmpNoNavigation")
                        .WithMany("Titles")
                        .HasForeignKey("EmpNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("titles_ibfk_1");

                    b.Navigation("EmpNoNavigation");
                });

            modelBuilder.Entity("TestDocker.Entities.Department", b =>
                {
                    b.Navigation("DeptEmps");

                    b.Navigation("DeptManagers");
                });

            modelBuilder.Entity("TestDocker.Entities.Employee", b =>
                {
                    b.Navigation("DeptEmps");

                    b.Navigation("DeptManagers");

                    b.Navigation("Salaries");

                    b.Navigation("Titles");
                });
#pragma warning restore 612, 618
        }
    }
}
